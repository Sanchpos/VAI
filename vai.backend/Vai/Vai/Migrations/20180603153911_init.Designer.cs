// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;
using Vai.Data;
using Vai.Data.Models.Enums;

namespace Vai.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20180603153911_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.3-rtm-10026");

            modelBuilder.Entity("Vai.Data.Models.Person", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("FirstName");

                    b.Property<int>("Gender");

                    b.Property<string>("LastName");

                    b.Property<string>("MiddleName");

                    b.HasKey("Id");

                    b.ToTable("Persons");
                });

            modelBuilder.Entity("Vai.Data.Models.Research", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("BallTrowing");

                    b.Property<double>("BloodPressureDiastolic");

                    b.Property<double>("BloodPressureSystolic");

                    b.Property<double>("Cholestirol");

                    b.Property<double>("CircumFenceArm");

                    b.Property<double>("CircumFenceChest");

                    b.Property<double>("CircumFenceCrus");

                    b.Property<double>("CircumFenceHead");

                    b.Property<double>("CircumFenceNeck");

                    b.Property<double>("CircumFenceThigh");

                    b.Property<double>("CircumFenceWaist");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<double>("DynamometyLeftHand");

                    b.Property<double>("DynamometyRightHand");

                    b.Property<double>("DynamometySpine");

                    b.Property<double>("Glucose");

                    b.Property<double>("GrenadeTrowing");

                    b.Property<double>("HandsLength");

                    b.Property<double>("HeartRateRest");

                    b.Property<double>("HeartRateTotalRest");

                    b.Property<double>("Height");

                    b.Property<double>("Hemoglobin");

                    b.Property<double>("HypoxicTestExpiration");

                    b.Property<double>("HypoxicTestInspiration");

                    b.Property<bool>("IsDrinkingAlco");

                    b.Property<bool>("IsSmoking");

                    b.Property<double>("Jumping");

                    b.Property<double>("JumpingLong");

                    b.Property<double>("LungsCapacity");

                    b.Property<Guid>("PersonId");

                    b.Property<double>("Platelets");

                    b.Property<int>("Posture");

                    b.Property<double>("PullUpStandart");

                    b.Property<double>("Pushes");

                    b.Property<double>("RedBloodCells");

                    b.Property<double>("Shooting25");

                    b.Property<double>("Shooting50");

                    b.Property<double>("Skinfolds6Edge");

                    b.Property<double>("SkinfoldsAbdominal");

                    b.Property<double>("SkinfoldsBiceps");

                    b.Property<double>("SkinfoldsCrus");

                    b.Property<double>("SkinfoldsSubscapular");

                    b.Property<double>("SkinfoldsThigh");

                    b.Property<double>("SkinfoldsTriceps");

                    b.Property<int>("Somatype");

                    b.Property<double>("SpineFrontwisePitch");

                    b.Property<double>("SpineRewardPitch");

                    b.Property<double>("Swiming100");

                    b.Property<double>("Swiming50");

                    b.Property<Guid>("TestDataId");

                    b.Property<double>("Weight");

                    b.Property<double>("WhiteBloodCells");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.ToTable("Researches");
                });

            modelBuilder.Entity("Vai.Data.Models.Sport", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Sport");
                });

            modelBuilder.Entity("Vai.Data.Models.SportResearch", b =>
                {
                    b.Property<Guid>("SportId");

                    b.Property<Guid>("ResearchId");

                    b.HasKey("SportId", "ResearchId");

                    b.HasIndex("ResearchId");

                    b.ToTable("SportResearch");
                });

            modelBuilder.Entity("Vai.Data.Models.TestsData", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("InnerRunTests");

                    b.Property<string>("InnerRusalovTest");

                    b.Property<string>("InnerTestDataTappingChernikova");

                    b.Property<string>("InnerTestPassedFlash");

                    b.Property<string>("InnerTestPassedMotion");

                    b.Property<string>("InnerTestPassedSound");

                    b.Property<string>("InnerTestPassedTapping");

                    b.Property<Guid>("ResearchId");

                    b.HasKey("Id");

                    b.HasIndex("ResearchId")
                        .IsUnique();

                    b.ToTable("Tests");
                });

            modelBuilder.Entity("Vai.Data.Models.Research", b =>
                {
                    b.HasOne("Vai.Data.Models.Person", "Person")
                        .WithMany("Researches")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Vai.Data.Models.SportResearch", b =>
                {
                    b.HasOne("Vai.Data.Models.Research", "Research")
                        .WithMany("Sports")
                        .HasForeignKey("ResearchId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Vai.Data.Models.Sport", "Sport")
                        .WithMany("Researches")
                        .HasForeignKey("SportId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Vai.Data.Models.TestsData", b =>
                {
                    b.HasOne("Vai.Data.Models.Research", "Research")
                        .WithOne("TestData")
                        .HasForeignKey("Vai.Data.Models.TestsData", "ResearchId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
